[tool.poetry]
name = "dapla-statbank-client"
version = "1.2.2"
description = "Handles data transfer Statbank <-> Dapla for Statistics Norway"
authors = ["Statistics Norway", "Carl F. Corneil <cfc@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/dapla-statbank-client"
repository = "https://github.com/statisticsnorway/dapla-statbank-client"
documentation = "https://statisticsnorway.github.io/dapla-statbank-client"
packages = [{ include = "statbank", from = "src" }]
classifiers = ["Development Status :: 5 - Production/Stable"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/dapla-statbank-client/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4"
pandas = ">=1.5.3"
requests = ">=2.28.2"
ipywidgets = ">=8.0.4"
IPython = ">=8.11.0"
pyjstat = ">=2.4.0"
toml = "^0.10.2"
python-dotenv = ">=1.0.1"
colorama = ">=0.4.6"
# Stubs for Mypy
pandas-stubs = ">=2.1.1.230928"
types-requests = ">=2.31.0.10"
types-toml = ">=0.10.8.7"
types-colorama = ">=0.4.15.20240205"
dapla-toolbelt = "^2.0.6"

[tool.poetry.group.dev.dependencies]
pygments = ">=2.10.0"
black = { extras = ["jupyter"], version = ">=24.3.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
furo = ">=2021.11.12"
mypy = ">=0.930"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
ruff = ">=0.0.284"
pytest = ">=6.2.5"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
ipykernel = ">=6.0.0"



[tool.pytest.ini_options]
pythonpath = ["src"]
markers = ["integration_dapla: actually runs against the real statbank API, therefore needs username and password"]

[tool.poetry.scripts]
dapla-statbank-client = "statbank.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["statbank", "tests"]
omit = ["*api_types.py"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 80
omit = ["*api_types.py"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
exclude = ["tests", "docs", "noxfile.py"]

[[tool.mypy.overrides]]
module = [
    "ipywidgets.*",
    "pyjstat.*",
]
ignore_missing_imports = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py39"  # Minimum Python version supported

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
select = ["ALL"]
ignore = [
    "ANN101", # Supress missing-type-self.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "TRY003", # Carl: Ruff wants me to subclass basic exceptions, I dont agree
    "FBT001", # Carl: Users will not want to create Enums just to run the function
    "FBT002", # Carl: Users will not want to create Enums just to run the function

]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
     "*.ipynb",  # Custom ignore for klass-package, notebooks are only for "demo", waiting for a B018 ignore on notebooks in ruff
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    # asserts are encouraged in pytest
    "S101",
    # return annotations don't add value for test functions
    "ANN201",
    # docstrings are overkill for test functions
    "D103",
    "D100",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
